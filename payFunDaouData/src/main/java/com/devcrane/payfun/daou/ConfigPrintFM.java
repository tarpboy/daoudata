package com.devcrane.payfun.daou;import java.util.Iterator;import java.util.Vector;import android.app.Activity;import android.bluetooth.BluetoothAdapter;import android.bluetooth.BluetoothDevice;import android.content.BroadcastReceiver;import android.content.Context;import android.content.Intent;import android.content.IntentFilter;import android.os.Bundle;import android.support.v4.app.Fragment;import android.view.LayoutInflater;import android.view.View;import android.view.View.OnClickListener;import android.view.ViewGroup;import android.widget.AdapterView;import android.widget.AdapterView.OnItemClickListener;import android.widget.ArrayAdapter;import android.widget.Button;import android.widget.EditText;import android.widget.ListView;import android.widget.RadioButton;import com.devcrane.payfun.daou.data.StaticData;import com.devcrane.payfun.daou.utility.AppHelper;import com.devcrane.payfun.daou.utility.BHelper;import com.sewoo.port.android.BluetoothPort;public class ConfigPrintFM extends Fragment {	private Activity at;	private EditText txtAddress;	private ListView lvDevices;	private Button btnSearch, btnSave;	private static final int REQUEST_ENABLE_BT = 2;	private ArrayAdapter<String> adapter;	private BluetoothAdapter mBluetoothAdapter;	private Vector<BluetoothDevice> remoteDevices;	private BroadcastReceiver searchFinish, searchStart, discoveryResult;	private Thread hThread;	private BluetoothPort bluetoothPort;	private RadioButton radioNormal;		@Override	public View onCreateView(LayoutInflater inflater, ViewGroup container, Bundle savedInstanceState) {		View v = inflater.inflate(R.layout.fragment_config_print, container, false);		txtAddress = (EditText) v.findViewById(R.id.txtAddress);		lvDevices = (ListView) v.findViewById(R.id.lvDevices);		btnSearch = (Button) v.findViewById(R.id.btnSearch);		btnSave = (Button) v.findViewById(R.id.btnSave);		radioNormal =(RadioButton) v.findViewById(R.id.radioNormal);		return v;	}		@Override	public void onStart() {		super.onStart();		initComponent();	}	@Override	public void onDestroy() {		super.onDestroy();		try {			bluetoothPort.disconnect();		} catch (Exception ex) {			ex.printStackTrace();		}		if ((hThread != null) && (hThread.isAlive())) {			hThread.interrupt();			hThread = null;		}		at.unregisterReceiver(searchFinish);		at.unregisterReceiver(searchStart);		at.unregisterReceiver(discoveryResult);	}	private void initComponent() {		BHelper.setActivity(at = getActivity());		BHelper.setTypeface(getView());		bluetoothSetup();		initBluetooth();				txtAddress.setText(AppHelper.prefGet(StaticData.BlueToothName, ""));		btnSearch.setOnClickListener(new OnClickListener() {			@Override			public void onClick(View v) {				if (!mBluetoothAdapter.isDiscovering()) {					remoteDevices = new Vector<BluetoothDevice>();					adapter.clear();					mBluetoothAdapter.startDiscovery();				} else {					mBluetoothAdapter.cancelDiscovery();				}			}		});	}		public static String getAddress() {		return AppHelper.prefGet(StaticData.BlueToothADD, "");	}	private void initBluetooth() {		adapter = new ArrayAdapter<String>(at, android.R.layout.simple_list_item_1);		lvDevices.setAdapter(adapter);		BluetoothDevice pairedDevice;		Iterator<BluetoothDevice> iter = (mBluetoothAdapter.getBondedDevices()).iterator();		while (iter.hasNext()) {			pairedDevice = iter.next();			if(remoteDevices!=null){				remoteDevices.add(pairedDevice);				adapter.add(pairedDevice.getName());			}		}		lvDevices.setOnItemClickListener(new OnItemClickListener() {			@Override			public void onItemClick(AdapterView<?> arg0, View arg1, int arg2, long arg3) {				final BluetoothDevice btDev = remoteDevices.elementAt(arg2);				try {					if (mBluetoothAdapter.isDiscovering()) {						mBluetoothAdapter.cancelDiscovery();					}										txtAddress.setText(btDev.getName());					btnSave.setOnClickListener(new OnClickListener() {						@Override						public void onClick(View v) {							AppHelper.prefSet(StaticData.BlueToothName, btDev.getName());							AppHelper.prefSet(StaticData.BlueToothADD, btDev.getAddress());							AppHelper.prefSet(StaticData.BlueToothSDK, "1");							if(!radioNormal.isChecked()){								AppHelper.prefSet(StaticData.BlueToothSDK, "0");							}							BHelper.showToast(R.string.sqlite_success);						}					});									} catch (Exception ex) {					BHelper.ex(ex);					return;				}			}		});		discoveryResult = new BroadcastReceiver() {			@Override			public void onReceive(Context context, Intent intent) {				String key;				BluetoothDevice remoteDevice = intent.getParcelableExtra(BluetoothDevice.EXTRA_DEVICE);				if (remoteDevice != null) {					key = remoteDevice.getName();					remoteDevices.add(remoteDevice);					adapter.add(key);				}			}		};		at.registerReceiver(discoveryResult, new IntentFilter(BluetoothDevice.ACTION_FOUND));		searchStart = new BroadcastReceiver() {			@Override			public void onReceive(Context context, Intent intent) {				txtAddress.setEnabled(false);				btnSearch.setText(getResources().getString(R.string.bt_stop_search_btn));			}		};		at.registerReceiver(searchStart, new IntentFilter(BluetoothAdapter.ACTION_DISCOVERY_STARTED));		searchFinish = new BroadcastReceiver() {			@Override			public void onReceive(Context context, Intent intent) {				txtAddress.setEnabled(true);				btnSearch.setText(getResources().getString(R.string.bt_search_btn));			}		};		at.registerReceiver(searchFinish, new IntentFilter(BluetoothAdapter.ACTION_DISCOVERY_FINISHED));	}	private void bluetoothSetup() {		remoteDevices = new Vector<BluetoothDevice>();		bluetoothPort = BluetoothPort.getInstance();		mBluetoothAdapter = BluetoothAdapter.getDefaultAdapter();		if (mBluetoothAdapter != null && !mBluetoothAdapter.isEnabled()) {			Intent enableBtIntent = new Intent(BluetoothAdapter.ACTION_REQUEST_ENABLE);			startActivityForResult(enableBtIntent, REQUEST_ENABLE_BT);		}	}}