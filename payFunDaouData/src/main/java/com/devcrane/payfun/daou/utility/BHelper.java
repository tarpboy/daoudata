package com.devcrane.payfun.daou.utility;import java.io.ByteArrayOutputStream;import java.io.File;import java.io.FileOutputStream;import java.io.InputStream;import java.io.PrintWriter;import java.io.StringWriter;import java.io.Writer;import java.security.MessageDigest;import java.text.NumberFormat;import java.text.SimpleDateFormat;import java.util.ArrayList;import java.util.Calendar;import java.util.Hashtable;import java.util.List;import java.util.Locale;import java.util.Set;import com.devcrane.payfun.daou.R;import com.devcrane.payfun.daou.data.StaticData;import android.annotation.SuppressLint;import android.app.Activity;import android.app.AlertDialog;import android.app.DatePickerDialog;import android.app.DatePickerDialog.OnDateSetListener;import android.app.ProgressDialog;import android.app.TimePickerDialog;import android.app.TimePickerDialog.OnTimeSetListener;import android.content.Context;import android.content.DialogInterface;import android.content.pm.PackageManager;import android.content.pm.PackageManager.NameNotFoundException;import android.graphics.Bitmap;import android.graphics.Bitmap.CompressFormat;import android.graphics.BitmapFactory;import android.graphics.Typeface;import android.media.AudioManager;import android.os.Build;import android.os.Bundle;import android.os.Environment;import android.os.Handler;import android.text.Editable;import android.text.InputFilter;import android.text.InputType;import android.text.TextWatcher;import android.util.Base64;import android.util.Log;import android.util.TypedValue;import android.view.Gravity;import android.view.LayoutInflater;import android.view.View;import android.view.View.OnClickListener;import android.view.ViewGroup;import android.view.WindowManager;import android.view.inputmethod.InputMethodManager;import android.widget.Button;import android.widget.CheckBox;import android.widget.DatePicker;import android.widget.EditText;import android.widget.ImageView;import android.widget.LinearLayout;import android.widget.TextView;import android.widget.TimePicker;import android.widget.Toast;public class BHelper {//	public static boolean TEST = false;		private static Activity at;	public static void setActivity(Activity at) {		BHelper.at = at;	}		public static void setTypeface(View rootView) {		if (rootView == null) {			return;		}				List<View> visited = new ArrayList<View>();	    List<View> unvisited = new ArrayList<View>();	    unvisited.add(rootView);		    while (!unvisited.isEmpty()) {	        View child = unvisited.remove(0);	        visited.add(child);	        if (!(child instanceof ViewGroup)) continue;	        ViewGroup group = (ViewGroup) child;	        final int childCount = group.getChildCount();	        for (int i=0; i<childCount; i++) unvisited.add(group.getChildAt(i));	    }			Typeface tf = Typeface.createFromAsset(at.getAssets(), "fonts/NanumGothicExtraBold.ttf");	    for (View v : visited) {			if (v instanceof EditText) {				((EditText) v).setTypeface(tf);			} else if (v instanceof TextView) {				((TextView) v).setTypeface(tf);			} else if (v instanceof Button) {				((Button) v).setTypeface(tf);			} else if (v instanceof CheckBox) {				((CheckBox) v).setTypeface(tf);			}		}	}		private static String tag() {//		StackTraceElement[] elements = Thread.currentThread().getStackTrace();//		int position = 3;//		for (int i = 3; i < elements.length; i++) {//			if (!elements[i].getFileName().equals(BHelper.class.getSimpleName() + ".java")) {//				position = i;//				break;//			}//		}//		StackTraceElement element = elements[position];//		String className = element.getClassName();//		String tag = className.substring(className.lastIndexOf(".") + 1);		//		tag += "-" + element.getLineNumber();//		tag += "-" + element.getMethodName();//		tag += "-Binh";		return "Payfun";	}	public static void db(Object msg) {		if (msg == null) {			Log.w(tag(), "null.");			return;		}		if(StaticData.IS_ENABLE_LOG){			Log.i(tag(), msg.toString() + ".");			Helper.writeLogFile(msg.toString());		}//		else//			Log.d(tag(), msg.toString() + ".");	}				public static void ex(Exception ex) {//		Log.e(tag(), ex.getMessage());		final Writer result = new StringWriter();        final PrintWriter printWriter = new PrintWriter(result);        // Inject some info about android version and the device, since google can't provide them in the developer console        StackTraceElement[] trace = ex.getStackTrace();        StackTraceElement[] trace2 = new StackTraceElement[trace.length+3];        System.arraycopy(trace, 0, trace2, 0, trace.length);        trace2[trace.length+0] = new StackTraceElement("Android", "MODEL", android.os.Build.MODEL, -1);        trace2[trace.length+1] = new StackTraceElement("Android", "VERSION", android.os.Build.VERSION.RELEASE, -1);        trace2[trace.length+2] = new StackTraceElement("Android", "FINGERPRINT", android.os.Build.FINGERPRINT, -1);        ex.setStackTrace(trace2);        ex.printStackTrace(printWriter);        String stacktrace = result.toString();        printWriter.close();        Helper.writeLogFile(stacktrace);        ex.printStackTrace();	}	public static String moneyFormat(String number) {		try {			double numberformat = Double.valueOf(number);			return NumberFormat.getInstance(Locale.US).format(numberformat);		} catch (Exception ex) {			return "0";		}	}	public static String moneyParse(TextView tv) {		return tv.getText().toString().trim().replace(",", "");	}		public static void moneySet(final EditText txt, final Runnable runnable) {		txt.setInputType(InputType.TYPE_CLASS_NUMBER);		txt.setFilters(new InputFilter[] { new InputFilter.LengthFilter(18) });		txt.addTextChangedListener(new TextWatcher() {			@Override			public void onTextChanged(CharSequence s, int start, int before, int count) {}			@Override			public void beforeTextChanged(CharSequence s, int start, int count, int after) {}			@Override			public void afterTextChanged(Editable s) {				boolean b = s.toString().equals("");				double price = b ? 0 : Double.valueOf(s.toString().replace(",", ""));				String str = moneyFormat(String.valueOf(price));				txt.removeTextChangedListener(this);				txt.setText(str);				txt.setSelection(str.length());				txt.addTextChangedListener(this);				if (runnable != null)					runnable.run();			}		});	}	public static String fileSDCard(String dir) {//		File dirPath = Environment.getExternalStorageDirectory();		String dirPath = Environment.getExternalStorageDirectory() + "/"+dir;		File file = new File(dirPath);		if (!file.exists()) {			file.mkdirs();		}		return file + "/";	}	public static boolean fileRename(String oldPath, String newPath) {		final File file = new File(oldPath);		if (file.exists())			return file.renameTo(new File(newPath));		return false;	}		public static Bitmap bitmapFromFile(String fileName) {		Bitmap bm = BitmapFactory.decodeFile(fileName);		return bm;	}	public static String bitmapToBase64(Bitmap bm) {		ByteArrayOutputStream baos = new ByteArrayOutputStream();		bm.compress(Bitmap.CompressFormat.PNG, 100, baos);		byte[] bs = baos.toByteArray();		String encoded = Base64.encodeToString(bs, Base64.DEFAULT);		return encoded;	}	public static Bitmap bitmapFromBase64(String base64) {		byte[] decodedByte = Base64.decode(base64, Base64.DEFAULT);		return BitmapFactory.decodeByteArray(decodedByte, Base64.DEFAULT, decodedByte.length);	}	public static String bitmapSave(Bitmap bitmap, File file) {		try {			FileOutputStream stream = new FileOutputStream(file.toString()); // + ".png");			bitmap.compress(CompressFormat.PNG, 100, stream);			stream.flush();			stream.close();		} catch (Exception ex) {			ex(ex);		}		return file.getName() + ".png";	}		public static String getDeviceSerial() {		String manufacturer = Build.MANUFACTURER;		String model = Build.SERIAL;				String s = model.startsWith(manufacturer) ? model : manufacturer + " " + model;		if (s == null || s.length() == 0) {			return "";		}		char first = s.charAt(0);		if (Character.isUpperCase(first)) {			return s;		} else {			return Character.toUpperCase(first) + s.substring(1);		}	}	//	public static void showToast(int resId) {//		final Toast toast = Toast.makeText(at, resId,Toast.LENGTH_SHORT);//		toast.setGravity(Gravity.CENTER, 0, 0);//		toast.setDuration(3000);//        toast.show();////        new CountDownTimer(3000, 1000)////        {////            public void onTick(long millisUntilFinished) {toast.show();}////            public void onFinish() {toast.cancel();}////        }.start();//        //		//	}//	public static void showToast(String msg) {////		Toast.makeText(at, msg, Toast.LENGTH_SHORT).show();//		final Toast toast = Toast.makeText(at, msg,Toast.LENGTH_SHORT);//		toast.setGravity(Gravity.CENTER, 0, 0);//		toast.setDuration(3000);//		toast.show();//	}//		public static void showToast(String msg){		Toast toast = Toast.makeText(at,				msg,				Toast.LENGTH_SHORT);		LinearLayout toastLayout = (LinearLayout) toast				.getView();		TextView toastTV = (TextView) toastLayout				.getChildAt(0);		toastTV.setTextSize(TypedValue.COMPLEX_UNIT_SP, StaticData.TEXT_SIZE_TOAST);//		View view = toast.getView();		//view.setAlpha((float) 0.3);//		view.setBackgroundColor(Color.parseColor("#D4D4D4"));//		toast.setView(view);		toast.setGravity(Gravity.CENTER, 0, 0);		toast.setDuration(Toast.LENGTH_SHORT);		toast.show();	}	public static void showToast(int resid){		Toast toast = Toast.makeText(at,				resid,				Toast.LENGTH_SHORT);		LinearLayout toastLayout = (LinearLayout) toast				.getView();		TextView toastTV = (TextView) toastLayout				.getChildAt(0);		toastTV.setTextSize(TypedValue.COMPLEX_UNIT_SP, StaticData.TEXT_SIZE_TOAST);		toast.setGravity(Gravity.CENTER, 0, 0);		toast.setDuration(Toast.LENGTH_SHORT);//		View view = toast.getView();//		view.setBackgroundResource(R.drawable.toast_drawable);//		toast.setView(view);		toast.show();	}		private static boolean backExit;	public static boolean showBackExit() {		if (backExit)			return true;		backExit = true;		Toast.makeText(at, "Please click BACK again to exit", Toast.LENGTH_SHORT).show();		new Handler().postDelayed(new Runnable() {			@Override			public void run() {				backExit = false;			}		}, 2000);		return false;	}	public static void keyboardHide(Activity at) {		keyboardHide(at.getCurrentFocus()); 	}	public static void keyboardHide(View view) {		InputMethodManager imm = (InputMethodManager) view.getContext().getSystemService(Context.INPUT_METHOD_SERVICE);		imm.hideSoftInputFromWindow(view.getWindowToken(), 0);	}	public static boolean mRequire;	public static void requireBtn(final Button btn, final Runnable runnable) {		btn.setOnClickListener(new OnClickListener() {			@Override			public void onClick(View v) {				mRequire = false;				runnable.run();			}		});	}		public static String requireTxt(EditText txt) {		String str = txt.getText().toString().trim();				if (mRequire) {			return str;		}		if (str.equals("")) {			showToast(R.string.sqlite_require);			txt.requestFocus();			mRequire = true;		} else {			str = (str.contains("-") ? str.replace("-", "") : str);			mRequire = false;		}		return str;	}	public static String requireTxt(EditText txt, int msgID) {		String str = txt.getText().toString().trim();				if (mRequire) {			return str;		}		if (str.equals("")) {			showToast(msgID);			txt.requestFocus();			mRequire = true;		} else {			str = (str.contains("-") ? str.replace("-", "") : str);			mRequire = false;		}		return str;	}		public static String md5(String password) {		try {			MessageDigest md = MessageDigest.getInstance("MD5");			md.update(password.getBytes());			byte byteData[] = md.digest();			StringBuffer sb = new StringBuffer();			for (int i = 0; i < byteData.length; i++)				sb.append(Integer.toString((byteData[i] & 0xff) + 0x100, 16).substring(1));			return sb.toString();		} catch (Exception ex) {			ex(ex);			mRequire = true;			return "";		}	}		public static class DialogHelper {				public static AlertDialog get(int titleId, int messageId, View view, final Runnable runnable) {			AlertDialog.Builder builder = new AlertDialog.Builder(at);			if (titleId != 0)				builder.setTitle(titleId);			if (messageId != 0)				builder.setMessage(messageId);			if (view != null)				builder.setView(view);			builder.setPositiveButton(android.R.string.yes, new DialogInterface.OnClickListener() {				@Override				public void onClick(DialogInterface dialog, int which) {					if (runnable != null)						runnable.run();				}			});			builder.setNegativeButton(android.R.string.no, null);			builder.setCancelable(false);			final AlertDialog alertDialog = builder.create();			alertDialog.show();			return alertDialog;		}				public static void view(int title, final View view, final Runnable runnable) {			AlertDialog.Builder builder = new AlertDialog.Builder(at);			if (title != 0)				builder.setTitle(title);			builder.setView(view);			if (runnable != null) {				builder.setPositiveButton(android.R.string.ok, new DialogInterface.OnClickListener() {					@Override					public void onClick(DialogInterface dialog, int which) {						keyboardHide(view);						runnable.run();					}				});				builder.setNegativeButton(android.R.string.cancel, new DialogInterface.OnClickListener() {										@Override					public void onClick(DialogInterface dialog, int which) {						keyboardHide(view);					}				});			} else {				builder.setPositiveButton(android.R.string.ok, null);			}			builder.show();		}		public static void confirm(int title, String message, final Runnable runnable) {			AlertDialog.Builder builder = new AlertDialog.Builder(at);			builder.setTitle(title);			builder.setMessage(message);			builder.setPositiveButton(android.R.string.yes, new DialogInterface.OnClickListener() {				@Override				public void onClick(DialogInterface dialog, int which) {					runnable.run();				}			});			builder.setNegativeButton(android.R.string.no, null);			builder.create();			builder.show();		}		public static void pickerDate(final Button btn, final Runnable runnable) {			final OnDateSetListener callBack = new OnDateSetListener() {				@Override				public void onDateSet(DatePicker view, int y, int m, int d) {					Calendar calendar = Calendar.getInstance();					calendar.set(y, m, d);					btn.setText(BHelper.CalendarHelper.getDate(calendar));					if (runnable != null)						runnable.run();				}			};			btn.setOnClickListener(new OnClickListener() {				@Override				public void onClick(View v) {					Calendar calendar = BHelper.CalendarHelper.getCalendar(btn.getText().toString().trim());					int year = calendar.get(Calendar.YEAR);					int monthOfYear = calendar.get(Calendar.MONTH);					int dayOfMonth = calendar.get(Calendar.DAY_OF_MONTH);					new DatePickerDialog(at, callBack, year, monthOfYear, dayOfMonth).show();				}			});		}		public static void pickerTime(final Button btn, final Runnable runnable) {			final OnTimeSetListener callBack = new OnTimeSetListener() {				@Override				public void onTimeSet(TimePicker view, int h, int m) {					Calendar calendar = Calendar.getInstance();					calendar.set(Calendar.HOUR_OF_DAY, h);					calendar.set(Calendar.MINUTE, m);					btn.setText(BHelper.CalendarHelper.getTime(calendar));					if (runnable != null)						runnable.run();				}			};			btn.setOnClickListener(new OnClickListener() {				@Override				public void onClick(View v) {					final Calendar calendar = BHelper.CalendarHelper.getCalendar(btn.getText().toString().trim());					int hourOfDay = calendar.get(Calendar.HOUR_OF_DAY);					int minute = calendar.get(Calendar.MINUTE);					new TimePickerDialog(at, callBack, hourOfDay, minute, true).show();				}			});		}		public static ProgressDialog makeDialog(int rsid){			ProgressDialog dialog = new ProgressDialog(at,R.style.DialogCustom);			dialog.getWindow().setGravity(Gravity.CENTER);			dialog.setMessage(at.getString(rsid));			dialog.setIndeterminate(true);			return dialog;		}		public static ProgressDialog makeDialog(Context ctx, int rsid){			ProgressDialog dialog = new ProgressDialog(at,R.style.DialogCustom);//			ProgressDialog dialog = new PaymentDialog(ctx);			dialog.setIndeterminate(true);			return dialog;		}	}	public static final int PAYMENT_STEP_1_1_MS_WAITING = 0;	public static final int PAYMENT_STEP_1_2_IC_WAITING = 1;	public static final int PAYMENT_STEP_2_READING_IC_CARD = 2;	public static final int PAYMENT_STEP_3_COMNUICATION_WITH_VAN = 3;	public static final int PAYMENT_STEP_4_CLOSE_PAYMENT = 4;	public static class PaymentDialog extends ProgressDialog {		Context ctx;		ImageView ivIcon;		TextView tvTitle;		int[] icons = {				R.drawable.ms_waiting_card,				R.drawable.ic_waiting,				R.drawable.ic_reading_card,				R.drawable.comunication_van_server,				R.drawable.closing_payment		};		int[] titles = {				R.string.msg_payment_step_1_1_ms_waiting,				R.string.msg_payment_step_1_2_ic_waiting,				R.string.msg_payment_step_2_ic_reading,				R.string.msg_payment_step_3_comnunicating_server,				R.string.msg_payment_step_4_closing		};		public PaymentDialog(Context context) {			super(context,R.style.DialogCustom);			ctx = context;		}		@Override		protected void onCreate(Bundle savedInstanceState) {			super.onCreate(savedInstanceState);			WindowManager.LayoutParams wlmp = getWindow().getAttributes();			wlmp.gravity = Gravity.CENTER;			getWindow().setAttributes(wlmp);			setTitle(null);			setCancelable(false);			setOnCancelListener(null);			View view = LayoutInflater.from(ctx).inflate(					R.layout.dialog_payment, null);			ivIcon = (ImageView)view.findViewById(R.id.iv_icon);			tvTitle = (TextView)view.findViewById(R.id.tv_title);			setContentView(view);			ivIcon.setImageResource(icons[1]);			tvTitle.setText(icons[1]);		}		public void updateProgress(int step){			int imageId = icons[step];			int title = titles[step];			ivIcon.setImageResource(imageId);			tvTitle.setText(title);		}	}		@SuppressLint("SimpleDateFormat")	public static class CalendarHelper {		private static final String			mDateTime = "yyyy-MM-dd HH:mm:ss.SSS",			mDate = "yyyy-MM-dd",			mTime = "HH:mm";		public static Calendar getCalendar(String str) {			str = str.replace("T", " ");			Calendar calendar = Calendar.getInstance();			try {				int start = str.substring(2, 3).equals(":") ? 11 : 0;				String formatString = mDateTime.substring(start, start + str.length());				calendar.setTime(new SimpleDateFormat(formatString).parse(str));			} catch (Exception ex) {				ex(ex);			}			return calendar;		}		public static String getDateTime(Calendar calendar) {			calendar = (calendar != null) ? calendar : Calendar.getInstance();			return new SimpleDateFormat(mDateTime).format(calendar.getTime());		}		public static String getDate(Calendar calendar) {			return new SimpleDateFormat(mDate).format(calendar.getTime());		}		public static String getTime(Calendar calendar) {			return new SimpleDateFormat(mTime).format(calendar.getTime());		}		public static String getZero(String str) {			String result = "";			int length = str.length();			length = length > 2 ? 4 : 2;			for (int i = str.length(); i < length; i++)				result += "0";			return result + str;		}	}	public static boolean isPackageInstalled(String packagename, Context context) {	    PackageManager pm = context.getPackageManager();	    try {	        pm.getPackageInfo(packagename, PackageManager.GET_ACTIVITIES);	        db("existed:"+packagename);	        return true;	    } catch (NameNotFoundException e) {	        return false;	    }	}	public static void cleanObject(Object obj){		obj = null;	}	public static  void showHashTable(Hashtable<String, String> data){		Set<String> keys = data.keySet();        for(String key: keys){        	BHelper.db(key+":"+data.get(key));        }	}	public static void showNeedDevice(){		BHelper.showToast(R.string.need_device);	}		public static void bitmapSave(Bitmap bitmap, String fileName) {		try {			String filePath = Helper.getExSD()+ fileName;			FileOutputStream fos = new FileOutputStream(filePath);			bitmap.compress(CompressFormat.PNG, 100, fos);			fos.flush();			fos.close();		} catch (Exception ex) {			ex(ex);		}	}		public static void bitmapFromURL(String fileName) {		try {			final String link = MySoap.URL_IMG + fileName;			final InputStream input = new java.net.URL(link).openStream();			BHelper.bitmapSave(BitmapFactory.decodeStream(input), fileName);		} catch (Exception e) {			e.printStackTrace();		}	}	public static int getCurrentVolumn(Context at){		AudioManager am = 			    (AudioManager) at.getSystemService(Context.AUDIO_SERVICE);		return am.getStreamVolume(AudioManager.STREAM_MUSIC);	}		public static void restoreVolumn(Context at){		int value = Integer.parseInt(AppHelper.getCurrentVolumn());		AudioManager am = 			    (AudioManager) at.getSystemService(Context.AUDIO_SERVICE);			am.setStreamVolume(			    AudioManager.STREAM_MUSIC,			    value,			    0);	}		public static void makeVolumnMaxs(Activity at){		AudioManager am = 			    (AudioManager) at.getSystemService(Context.AUDIO_SERVICE);			am.setStreamVolume(			    AudioManager.STREAM_MUSIC,			    am.getStreamMaxVolume(AudioManager.STREAM_MUSIC),			    0);	}	public static String hashTabbeToString(Hashtable<String, String> data){		String res="";		Set<String> keys = data.keySet();		for(String key: keys){			res+=key+":"+data.get(key)+"\n";		}		return res;	}}